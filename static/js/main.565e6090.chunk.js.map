{"version":3,"sources":["logo.svg","Navigation/NavigationBanner.tsx","Navigation/NavigationBrand.tsx","Navigation/NavigationMain.tsx","Pages/Home.tsx","Navigation/NavigationSwitch.tsx","Navigation/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavigationBanner","this","props","bg","variant","Navbar","expand","className","Brand","React","Component","NavigationBrand","to","alt","src","logo","width","height","NavigationMain","collapseOnSelect","sticky","Toggle","aria-controls","Collapse","id","Nav","Link","Home","listItems","Array","from","length","x","i","map","num","key","NavigationSwitch","path","Navigation","App","basename","Boolean","window","location","hostname","match","theme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,iMCI9BC,EAAb,uKACY,IAAD,EACiBC,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QACZ,OACE,kBAACC,EAAA,EAAD,CACEC,OAAO,KACPH,GAAIA,EACJC,QAASA,EACTG,UAAU,yCAEV,kBAACF,EAAA,EAAOG,MAAR,KACE,sDAXV,GAAsCC,IAAMC,W,iCCC/BC,EAAb,uKAEI,OACE,kBAAC,gBAAD,CAAeC,GAAG,KAChB,kBAACP,EAAA,EAAOG,MAAR,KACE,yBACEK,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPV,UAAU,mCAVtB,GAAqCE,IAAMC,WCG9BQ,EAAb,uKACY,IAAD,EACiBjB,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QACZ,OACE,kBAACC,EAAA,EAAD,CACEc,kBAAkB,EAClBb,OAAO,KACPH,GAAIA,EACJC,QAASA,EACTgB,OAAO,OAEP,kBAAC,EAAD,MACA,kBAACf,EAAA,EAAOgB,OAAR,CAAeC,gBAAc,0BAC7B,kBAACjB,EAAA,EAAOkB,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKlB,UAAU,WACb,kBAAC,gBAAD,CAAeK,GAAG,KAChB,kBAACa,EAAA,EAAIC,KAAL,cAEF,kBAAC,gBAAD,CAAed,GAAG,KAChB,kBAACa,EAAA,EAAIC,KAAL,eAEF,kBAAC,gBAAD,CAAed,GAAG,KAChB,kBAACa,EAAA,EAAIC,KAAL,kBAEF,kBAAC,gBAAD,CAAed,GAAG,KAChB,kBAACa,EAAA,EAAIC,KAAL,0BAzBd,GAAoCjB,IAAMC,W,OCN7BiB,EAAb,uKAEI,IACMC,EADUC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GAAJ,OAAUA,KAC3BC,KAAI,SAAAC,GAAG,OAAI,wBAAIC,IAAKD,GAAMA,MACpD,OACE,oCACE,4BAAKP,QANb,GAA0BnB,IAAMC,WCEnB2B,EAAb,uKAEI,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,YALV,GAAsC7B,IAAMC,WCI/B6B,EAAb,uKACY,IAAD,EACiBtC,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QACZ,OACE,6BACE,kBAAC,EAAD,CAAkBD,GAAIA,EAAIC,QAASA,IACnC,kBAAC,EAAD,CAAgBD,GAAIA,EAAIC,QAASA,IACjC,6BACE,kBAAC,EAAD,YARV,GAAgCK,IAAMC,WCFzB8B,EAAb,uKACY,IAAD,EACiBvC,KAAKC,MAArBC,EADD,EACCA,GAAIC,EADL,EACKA,QACZ,OACE,kBAAC,aAAD,CAAQqC,SAAS,iBACf,kBAAC,EAAD,CAAYtC,GAAIA,EAAIC,QAASA,SALrC,GAAyBK,IAAMC,WCMXgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EACA,QADAA,EAEK,QAGXC,IAASC,OACP,kBAAC,EAAD,CAAK9C,GAAI4C,EAAU3C,QAAS2C,IAC5BG,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.565e6090.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4dacbda8.svg\";","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { ThemeProps } from '../Theme/Theme'\r\n\r\nexport class NavigationBanner extends React.Component<ThemeProps, object> {\r\n  render() {\r\n    const { bg, variant } = this.props\r\n    return (\r\n      <Navbar\r\n        expand=\"md\"\r\n        bg={bg}\r\n        variant={variant}\r\n        className=\"justify-content-center NavMain-Banner\"\r\n      >\r\n        <Navbar.Brand>\r\n          <h1>You're Invited!!</h1>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport logo from '../logo.svg'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nexport class NavigationBrand extends React.Component {\r\n  render() {\r\n    return (\r\n      <LinkContainer to=\"/\">\r\n        <Navbar.Brand>\r\n          <img\r\n            alt=\"\"\r\n            src={logo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />\r\n        </Navbar.Brand>\r\n      </LinkContainer>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { ThemeProps } from '../Theme/Theme'\r\n\r\nimport { NavigationBrand } from './NavigationBrand'\r\n\r\nexport class NavigationMain extends React.Component<ThemeProps, object> {\r\n  render() {\r\n    const { bg, variant } = this.props\r\n    return (\r\n      <Navbar\r\n        collapseOnSelect={true}\r\n        expand=\"md\"\r\n        bg={bg}\r\n        variant={variant}\r\n        sticky=\"top\"\r\n      >\r\n        <NavigationBrand />\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>Home</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>About</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>Registry</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>The Venue</Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport class Home extends React.Component {\r\n  render() {\r\n    const numbers = Array.from({ length: 20 }, (x, i) => i)\r\n    const listItems = numbers.map(num => <h1 key={num}>{num}</h1>)\r\n    return (\r\n      <>\r\n        <ul>{listItems}</ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport { Home } from '../Pages/Home'\r\n\r\nexport class NavigationSwitch extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport '../Theme/css/Navigation.css'\r\nimport { ThemeProps } from '../Theme/Theme'\r\nimport { NavigationBanner } from './NavigationBanner'\r\nimport { NavigationMain } from './NavigationMain'\r\nimport { NavigationSwitch } from './NavigationSwitch'\r\n\r\nexport class Navigation extends React.Component<ThemeProps, object> {\r\n  render() {\r\n    const { bg, variant } = this.props\r\n    return (\r\n      <div>\r\n        <NavigationBanner bg={bg} variant={variant} />\r\n        <NavigationMain bg={bg} variant={variant} />\r\n        <div>\r\n          <NavigationSwitch />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { ThemeProps } from './Theme/Theme'\n\nimport { Navigation } from './Navigation/Navigation'\n\nexport class App extends React.Component<ThemeProps, object> {\n  render() {\n    const { bg, variant } = this.props\n    return (\n      <Router basename=\"/cole-wedding\">\n        <Navigation bg={bg} variant={variant} />\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { ThemeProps } from './Theme/Theme'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst theme: ThemeProps = {\n  bg: 'light',\n  variant: 'light',\n}\n\nReactDOM.render(\n  <App bg={theme.bg} variant={theme.variant} />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}